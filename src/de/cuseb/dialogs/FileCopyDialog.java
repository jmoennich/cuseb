/*  
 * Copyright 2012 Jan MÃ¶nnich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.cuseb.dialogs;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import javax.swing.SwingUtilities;

public class FileCopyDialog extends javax.swing.JDialog implements Runnable {

    private List<File> copyFroms;
    private List<File> copyTos;
    private Exception exception;
    private Thread thread;

    public FileCopyDialog(java.awt.Frame parent,
            List<File> copyFroms,
            List<File> copyTos) {

        super(parent, true);
        this.copyFroms = copyFroms;
        this.copyTos = copyTos;

        initComponents();
        progress.setMaximum(copyFroms.size());
    }

    @Override
    public void setVisible(boolean b) {
        thread = new Thread(this);
        thread.start();
        super.setVisible(b);
    }

    public Exception getException() {
        return exception;
    }

    @Override
    public void run() {

        int count = 0;
        final int size = copyFroms.size();

        for (int i = 0; i < size; i++) {
            Path pathFrom = Paths.get(copyFroms.get(i).toString());
            Path pathTo = Paths.get(copyTos.get(i).toString());
            try {
                Files.copy(pathFrom, pathTo,
                        StandardCopyOption.REPLACE_EXISTING,
                        StandardCopyOption.COPY_ATTRIBUTES);

            } catch (IOException e) {
                e.printStackTrace();
                exception = e;
                dispose();
                return;
            }
            final int value = ++count;
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    progress.setValue(value);
                    labelProgress.setText("Datei " + value + " von " + size
                            + " wird kopiert...");
                }
            });
        }
        dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelProgress = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        buttonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kopieren");
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        labelProgress.setText("Vorbereiten...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        getContentPane().add(labelProgress, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        getContentPane().add(progress, gridBagConstraints);

        buttonCancel.setText("Abbruch");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(buttonCancel, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-405)/2, (screenSize.height-130)/2, 405, 130);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
    }//GEN-LAST:event_buttonCancelActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JLabel labelProgress;
    private javax.swing.JProgressBar progress;
    // End of variables declaration//GEN-END:variables
}
