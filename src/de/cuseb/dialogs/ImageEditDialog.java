/*  
 * Copyright 2012 Jan Mönnich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.cuseb.dialogs;

import de.cuseb.Utils;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import javax.swing.JPanel;

public class ImageEditDialog extends javax.swing.JDialog {

    private BufferedImage image;
    private ImagePanel panel;
    private boolean canceled;
    private boolean modified;
    private boolean cut;

    public ImageEditDialog(java.awt.Frame parent, BufferedImage image) {
        super(parent, true);
        initComponents();
        this.image = image;
        this.canceled = true;
        panel = new ImagePanel();
        scroll.setViewportView(panel);
        pack();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dialogSize = getSize();
        setLocation((screenSize.width - dialogSize.width) / 2,
                (screenSize.height - dialogSize.height) / 2);
    }

    private class ImagePanel extends JPanel {

        public ImagePanel() {
            addMouseMotionListener(new MouseMotionAdapter() {

                @Override
                public void mouseMoved(MouseEvent e) {
                    if (cut) {
                        repaint();
                    }
                }
            });
            addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    if (cut && e.getButton() == MouseEvent.BUTTON1) {
                        doCut(e.getX(), e.getY());
                    }
                }
            });
        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(image.getWidth(), image.getHeight());
        }

        @Override
        protected void paintComponent(Graphics g) {
            g.drawImage(image, 0, 0, null);
            if (cut) {
                Point mouse = getMousePosition();
                if (mouse != null) {
                    if (mouse.x < image.getWidth()
                            && mouse.y < image.getHeight()) {
                        g.setXORMode(Color.WHITE);
                        g.drawLine(mouse.x, 0, mouse.x, mouse.y);
                        g.drawLine(0, mouse.y, mouse.x, mouse.y);
                    }
                }
            }
        }
    }

    public boolean isCanceled() {
        return canceled;
    }

    public BufferedImage getImage() {
        return image;
    }

    public boolean isModified() {
        return modified;
    }

    public void setModified(boolean modified) {
        this.modified = modified;
        buttonSave.setEnabled(modified);
    }

    private void doCut(int x, int y) {
        BufferedImage result = new BufferedImage(x, y, image.getType());
        result.getGraphics().drawImage(
                Toolkit.getDefaultToolkit().createImage(
                new FilteredImageSource(image.getSource(),
                new CropImageFilter(0, 0, x, y))), 0, 0, null);
        setModified(true);
        image = result;
        cut = false;
        repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        buttonCut = new javax.swing.JButton();
        buttonBrighten = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        scroll = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Titelbild bearbeiten");

        toolbar.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        buttonCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cuseb/images/cut.png"))); // NOI18N
        buttonCut.setText("Rand abschneiden");
        buttonCut.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        buttonCut.setFocusable(false);
        buttonCut.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        buttonCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCutActionPerformed(evt);
            }
        });
        toolbar.add(buttonCut);

        buttonBrighten.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cuseb/images/bulb.png"))); // NOI18N
        buttonBrighten.setText("Aufhellen");
        buttonBrighten.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        buttonBrighten.setFocusable(false);
        buttonBrighten.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        buttonBrighten.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonBrighten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrightenActionPerformed(evt);
            }
        });
        toolbar.add(buttonBrighten);

        buttonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cuseb/images/ok.png"))); // NOI18N
        buttonSave.setText("Änderungen speichern");
        buttonSave.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        buttonSave.setEnabled(false);
        buttonSave.setFocusable(false);
        buttonSave.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        buttonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        toolbar.add(buttonSave);

        getContentPane().add(toolbar, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(scroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCutActionPerformed
        cut = !cut;
        if (cut) {
            panel.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
            panel.repaint();
        } else {
            panel.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_buttonCutActionPerformed

    private void buttonBrightenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrightenActionPerformed
        image = Utils.brighten(image);
        panel.repaint();
        setModified(true);
    }//GEN-LAST:event_buttonBrightenActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        canceled = false;
        dispose();
    }//GEN-LAST:event_buttonSaveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBrighten;
    private javax.swing.JButton buttonCut;
    private javax.swing.JButton buttonSave;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
}
